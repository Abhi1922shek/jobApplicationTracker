# Generated by Django 5.2.1 on 2025-05-15 12:23

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the company.', max_length=200)),
                ('website', models.URLField(blank=True, help_text="Company's website (optional).", null=True)),
                ('user', models.ForeignKey(help_text='The user who owns this company entry.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name_manual', models.CharField(blank=True, help_text="Use this if you don't want to add the company to your main list, or for a one-off application.", max_length=200)),
                ('job_title', models.CharField(help_text='The title of the job you applied for.', max_length=200)),
                ('job_description', models.TextField(blank=True, help_text='Copy-paste the Job Description here (optional).')),
                ('application_link', models.URLField(blank=True, help_text='Link to the job posting or application portal (optional).', null=True)),
                ('application_source', models.CharField(blank=True, choices=[('LINKEDIN', 'LinkedIn'), ('INDEED', 'Indeed'), ('COMPANY_WEBSITE', 'Company Website'), ('JOB_BOARD_OTHER', 'Other Job Board (e.g., Glassdoor, Monster)'), ('REFERRAL', 'Referral'), ('NETWORKING', 'Networking Event / Contact'), ('CAREER_FAIR', 'Career Fair'), ('OTHER', 'Other')], default=None, help_text='Where did you find/apply for this job?', max_length=50, null=True)),
                ('applied_date', models.DateField(default=django.utils.timezone.now, help_text='The date you submitted the application.')),
                ('status', models.CharField(choices=[('APPLIED', 'Applied'), ('ASSESSMENT', 'Online Assessment'), ('INTERVIEW_R1', 'Interview Round 1'), ('INTERVIEW_R2', 'Interview Round 2'), ('INTERVIEW_R3_PLUS', 'Interview Round 3+'), ('OFFER_RECEIVED', 'Offer Received'), ('OFFER_ACCEPTED', 'Offer Accepted'), ('OFFER_DECLINED', 'Offer Declined'), ('REJECTED', 'Rejected'), ('WITHDRAWN', 'Withdrawn'), ('GHOSTED', 'Ghosted / No Response')], default='APPLIED', help_text='Current status of your application.', max_length=20)),
                ('resume_submitted', models.FileField(blank=True, help_text='The resume PDF/DOCX you submitted (optional).', null=True, upload_to='resumes/%Y/%m/%d/')),
                ('notes', models.TextField(blank=True, help_text='Any personal notes, contacts, or next steps (optional).')),
                ('last_reminder_sent_date', models.DateField(blank=True, editable=False, help_text='Internal field: Date last reminder email was sent.', null=True)),
                ('resume_match_score', models.FloatField(blank=True, editable=False, help_text='Internal field: Calculated match score between resume and JD.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(blank=True, help_text="Select a company from your list. If the company is new, add it first or use 'Company Name (Manual)'. ", null=True, on_delete=django.db.models.deletion.SET_NULL, to='job_applications.company')),
                ('user', models.ForeignKey(help_text='The user who owns this application entry.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Job Application',
                'verbose_name_plural': 'Job Applications',
                'ordering': ['-applied_date', '-updated_at'],
            },
        ),
    ]
